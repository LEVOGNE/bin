#!/bin/bash

# ======================================================
# 🎋 asciitree - Zeigt die Baumstruktur eines Verzeichnisses
# Autor: Levogne
# Version: 1.1
# Beschreibung: Zeigt eine ASCII-Baumstruktur von Verzeichnissen und Dateien.
# Lizenz: MIT
# ======================================================

# Hilfe-Funktion
usage() {
    cat <<EOF

🎋 asciitree - Zeigt die Baumstruktur eines Verzeichnisses

Autor: Levogne  
Version: 1.1  
Lizenz: MIT

Syntax:  
  a3 [OPTION] [VERZEICHNIS]  

Optionen:  
  -h, --help       Zeigt diese Hilfe an  
  -a, --all        Zeigt Verzeichnisse und Dateien an, inkl. versteckte Dateien  
  -v, --version    Zeigt die Skriptversion an  
  -0, -1, -2..     Zeigt die Struktur bis zur angegebenen Tiefe  
  --exc ORDNER1,ORDNER2  Schließt bestimmte Ordner von der Anzeige aus  
  --export DATEI   Exportiert die Ausgabe in eine Datei  

Beispiele:  
  a3 ./                     Zeigt nur die sichtbare Verzeichnisstruktur  
  a3 ./ -a                  Zeigt alle Dateien und Ordner inkl. versteckter Dateien  
  a3 ./ --exc test,temp     Schließt 'test' und 'temp' aus  
  a3 ./ --export baum.txt   Exportiert die Struktur in eine Datei  

EOF
}

# Versions-Funktion
version() {
    echo "asciitree Version 1.1"
}

# Hauptbaumstruktur-Funktion
asciitree() {
    local dir=${1:-.}
    local indent=${2:-0}
    local show_files=${3:-false}
    local max_depth=${4:-9999}
    local current_depth=${5:-0}
    local exclude_dirs=(${6//,/ })
    local export_file=${7:-""}
    local prefix="│   "
    local last_prefix="└── "
    local mid_prefix="├── "

    # Verlasse die Funktion, wenn die maximale Tiefe erreicht ist
    if [ "$current_depth" -ge "$max_depth" ]; then
        return
    fi

    local items

    if [ "$show_files" = true ]; then
        # Zeige alle Dateien und Ordner, inkl. versteckter
        items=$(ls -A "$dir")
    else
        # Zeige nur sichtbare Dateien und Ordner
        items=$(find "$dir" -mindepth 1 -maxdepth 1 ! -name ".*" | sed 's#.*/##')
    fi

    local count=$(echo "$items" | wc -l)
    local i=1

    for item in $items; do
        local item_path="$dir/$item"
        local abs_item_path=$(realpath "$item_path")

        # Überspringe ausgeschlossene Ordner
        for excluded in "${exclude_dirs[@]}"; do
            local abs_excluded=$(realpath "$excluded")
            if [[ "$abs_item_path" == "$abs_excluded" ]]; then
                continue 2
            fi
        done

        # Ausgabe vorbereiten
        local output_line
        if [ $i -eq $count ]; then
            output_line="$(printf "%${indent}s")${last_prefix}$item"
        else
            output_line="$(printf "%${indent}s")${mid_prefix}$item"
        fi

        # Ausgabe entweder in Datei schreiben oder direkt anzeigen
        if [ -n "$export_file" ]; then
            echo "$output_line" >> "$export_file"
        else
            echo "$output_line"
        fi

        # Rekursiver Aufruf für Unterordner
        if [ -d "$item_path" ]; then
            asciitree "$item_path" $((indent + 4)) "$show_files" "$max_depth" $((current_depth + 1)) "${exclude_dirs[*]}" "$export_file"
        fi
        i=$((i + 1))
    done
}

# Argumente verarbeiten
if [ $# -eq 0 ]; then
    usage
    exit 0
fi

# Variablen
max_depth=9999
show_files=false
exclude_dirs=()
export_file=""
dir=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -v|--version)
            version
            exit 0
            ;;
        -a|--all)
            show_files=true
            shift
            ;;
        -[0-9])
            max_depth=${1:1}
            shift
            ;;
        --exc)
            if [ -n "$2" ]; then
                exclude_dirs+=($(echo "$2" | tr ',' ' '))
                shift 2
            else
                echo "❌ Fehler: '--exc' benötigt eine Liste von Ordnern."
                exit 1
            fi
            ;;
        --export)
            if [ -n "$2" ]; then
                export_file="$2"
                > "$export_file"
                shift 2
            else
                echo "❌ Fehler: '--export' benötigt einen Dateinamen."
                exit 1
            fi
            ;;
        *)
            dir="$1"
            shift
            ;;
    esac
done

# Standardverzeichnis festlegen
if [ -z "$dir" ]; then
    dir="."
fi

# Hauptfunktion aufrufen
asciitree "$dir" 0 "$show_files" "$max_depth" 0 "${exclude_dirs[*]}" "$export_file"

# Abschlussmeldung für Export
if [ -n "$export_file" ]; then
    echo "🎉 Struktur wurde erfolgreich in '$export_file' exportiert."
fi
