#!/bin/bash
# ======================================================
# 🎋 c2m - Code2Merge in eine Textdatei
# Autor: Levogne
# Version: 1.5.1
# Beschreibung: Fasst Dateien mit einer oder mehreren Endungen in eine Textdatei zusammen
# Lizenz: MIT
# ======================================================

show_help() {
    echo "Verwendung: code2merge <dateierweiterungen> <verzeichnis> [optionen]"
    echo "            code2merge <projekt-typ> [optionen]"
    echo ""
    echo "Optionen:"
    echo "  --export <ausgabedatei>         Benutzerdefinierte Ausgabedatei festlegen"
    echo "  --exec <ordner1,ordner2>        Ordner, die ignoriert werden sollen"
    echo "  --root <datei1,datei2>          Wichtige Dateien im Stammverzeichnis"
    echo "  --exclude-files <datei1,datei2> Dateien, die explizit ausgeschlossen werden"
    echo ""
    echo "Projekt-Typen:"
    echo "  fastapi  | vue | react | nuxt"
    echo ""
    echo "Beispiele:"
    echo "  c2m rs ."
    echo "  c2m py,js ./ordner"
    echo "  c2m css,html /pfad/zum/projekt"
    echo "  c2m rs,js . --export meine_datei.txt"
    echo "  c2m js,ts,vue ./ --exec node_modules,build,dist"
    echo "  c2m py ./ --root pyproject.toml,README.md"
    echo "  c2m nuxt --exclude-files package-lock.json     # Nutzt Nuxt-Voreinstellungen und schließt bestimmte Dateien aus"
    echo ""
    echo "Standard-Ausgabedatei ist 'code2merge.txt', wenn kein --export angegeben wird."
    exit 1
}


# Falls kein Argument übergeben wurde
if [ $# -lt 1 ]; then
    show_help
fi

# Vordefinierte Projekt-Typen behandeln
handle_project_type() {
    local type="$1"
    shift
    case "$type" in
        "fastapi")
            set -- "py" "./" \
                --exec ".venv" \
                --export "c2mFASTAPI.txt" \
                --root "pyproject.toml,README.md,Dockerfile,main.py,*.json" "$@"
            ;;
        "vue")
            set -- "vue,js,ts" "./" \
                --exec "node_modules,dist" \
                --export "c2mVUE.txt" \
                --root "package.json,vite.config.js,vue.config.js,README.md,*.json" "$@"
            ;;
        "react")
            set -- "jsx,js,ts,tsx" "./" \
                --exec "node_modules,build" \
                --export "c2mREACT.txt" \
                --root "package.json,webpack.config.js,README.md,*.json" "$@"
            ;;
        "nuxt")
            set -- "vue,js,ts" "./" \
                --exec "node_modules,.nuxt,dist" \
                --export "c2mNUXT.txt" \
                --root "nuxt.config.ts,nuxt.config.js,package.json,README.md,*.json" \
                --exclude-files "package-lock.json,yarn-lock.json" "$@"
            ;;
        *)
            echo "❌ Unbekannter Projekt-Typ: $type"
            show_help
            ;;
    esac
    "$0" "$@"   # Skript neu aufrufen mit neuen Argumenten
    exit 0
}

# Projekt-Typ erkennen
if [[ ! "$1" =~ ^- ]]; then
    case "$1" in
        fastapi|vue|react|nuxt)
            handle_project_type "$@"
            ;;
    esac
fi

# Falls nicht als Projekt-Typ, dann regulär parsen
if [ $# -lt 2 ]; then
    show_help
fi

# === Initialwerte ===
extensions=$1
directory=$2
output_file="code2merge.txt"
exclude_dirs=""
root_files=""
exclude_files=""

shift 2
while [ "$#" -gt 0 ]; do
    case "$1" in
        --export)
            output_file="$2"; shift 2 ;;
        --exec)
            exclude_dirs="$2"; shift 2 ;;
        --root)
            root_files="$2"; shift 2 ;;
        --exclude-files)
            exclude_files="$2"; shift 2 ;;
        *)
            echo "❌ Unbekanntes Argument: $1"
            show_help ;;
    esac
done

# === Start Ausgabe ===
> "$output_file"

# === Stammdateien ===
if [ -n "$root_files" ]; then
    echo "// ===== WICHTIGE DATEIEN IM STAMMVERZEICHNIS =====" >> "$output_file"
    echo "" >> "$output_file"
    IFS=',' read -ra root_array <<< "$root_files"
    for pattern in "${root_array[@]}"; do
        for file in $directory/$pattern; do
            [ -f "$file" ] || continue
            skip=0
            if [ -n "$exclude_files" ]; then
                IFS=',' read -ra exclude_array <<< "$exclude_files"
                for ex in "${exclude_array[@]}"; do
                    [[ "$file" == *"$ex"* ]] && skip=1 && break
                done
            fi
            [ "$skip" -eq 1 ] && echo "🔵 Datei wird übersprungen: $file" && continue
            echo "// ## FILE: ${file#./}" >> "$output_file"
            echo "// ## BEGIN ##" >> "$output_file"
            cat "$file" >> "$output_file"
            echo -e "\n// ## END ##\n" >> "$output_file"
        done
    done
    echo "// ===== ENDE WICHTIGE DATEIEN =====" >> "$output_file"
    echo "" >> "$output_file"
fi

# === Dateisuche nach Erweiterungen ===
echo "// ===== DATEIEN NACH ERWEITERUNGEN =====" >> "$output_file"
IFS=',' read -ra ext_array <<< "$extensions"
for ext in "${ext_array[@]}"; do
    # Finde Dateien mit einfacher (z.B. foo.ts) oder doppelter Erweiterung (z.B. foo.d.ts)
    files=$(find "$directory" -type f \
        \( -name "*.$ext" -o -name "*.*.$ext" \) \
        | grep -v "/\.")
    echo "$files" | while read -r file; do
        [ -z "$file" ] && continue
        skip=0
        if [ -n "$exclude_files" ]; then
            IFS=',' read -ra exclude_array <<< "$exclude_files"
            for ex in "${exclude_array[@]}"; do
                [[ "$file" == *"$ex"* ]] && skip=1 && break
            done
        fi
        [ "$skip" -eq 1 ] && echo "🔵 Datei wird übersprungen: $file" && continue
        echo "// ## FILE: $file" >> "$output_file"
        echo "// ## BEGIN ##" >> "$output_file"
        cat "$file" >> "$output_file"
        echo -e "\n// ## END ##\n" >> "$output_file"
    done
done

echo "✅ Dateien wurden erfolgreich in '$output_file' zusammengeführt."
