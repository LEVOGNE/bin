#!/bin/bash
# ======================================================
# 🎋 c2m - Code2Merge in eine Textdatei
# Autor: Levogne
# Version: 1.3
# Beschreibung: Fasst Dateien mit einer oder mehreren Endungen in eine Textdatei zusammen
# Lizenz: MIT
# ======================================================

show_help() {
    echo "Verwendung: code2merge <dateierweiterungen> <verzeichnis> [optionen]"
    echo "Optionen:"
    echo "  --export <ausgabedatei>  Benutzerdefinierte Ausgabedatei festlegen"
    echo "  --exec <ordner1,ordner2> Ordner, die ignoriert werden sollen"
    echo ""
    echo "Beispiele:"
    echo "  c2m rs ."
    echo "  c2m py,js ./ordner"
    echo "  c2m css,html /pfad/zum/projekt"
    echo "  c2m rs,js . --export meine_datei.txt"
    echo "  c2m js,ts,vue ./ --exec node_modules,build,dist"
    echo ""
    echo "Standard-Ausgabedatei ist 'code2merge.txt', wenn kein --export angegeben wird."
    exit 1
}

# Argumentenprüfung
if [ $# -lt 2 ]; then
    show_help
fi

# Argumente parsen
extensions=$1
directory=$2
output_file="code2merge.txt" # Standardausgabedatei
exclude_dirs=""

# Argumente nach dem Verzeichnis verarbeiten
shift 2
while [ "$#" -gt 0 ]; do
    case "$1" in
        --export)
            if [ -n "$2" ]; then
                output_file=$2
                shift 2
            else
                echo "❌ Fehler: Das Flag '--export' wurde angegeben, aber kein Dateiname wurde bereitgestellt."
                exit 1
            fi
            ;;
        --exec)
            if [ -n "$2" ]; then
                exclude_dirs=$2
                shift 2
            else
                echo "❌ Fehler: Das Flag '--exec' wurde angegeben, aber keine Ordner wurden bereitgestellt."
                exit 1
            fi
            ;;
        *)
            echo "❌ Fehler: Unbekanntes Argument '$1'"
            show_help
            ;;
    esac
done

# Entferne eventuelle Anführungszeichen aus den Erweiterungen
extensions=${extensions//\"/}

# Leere oder erstelle die Ausgabedatei
> "$output_file"

# Verarbeite jede angegebene Erweiterung
IFS=',' read -ra ext_array <<< "$extensions"
for ext in "${ext_array[@]}"; do
    # Baue den find-Befehl
    find_cmd="find \"$directory\" -type f -name \"*.$ext\""
    
    # Füge Ausschlüsse für Verzeichnisse hinzu, die mit einem Punkt beginnen
    find_cmd="$find_cmd | grep -v \"/\.\""
    
    # Füge benutzerdefinierte Ausschlüsse hinzu
    if [ -n "$exclude_dirs" ]; then
        IFS=',' read -ra exclude_array <<< "$exclude_dirs"
        for exclude in "${exclude_array[@]}"; do
            find_cmd="$find_cmd | grep -v \"/$exclude/\""
        done
    fi
    
    # Debug-Ausgaben entfernt
    
    # Führe den Befehl aus und verarbeite die Ergebnisse
    files=$(eval $find_cmd)
    
    if [ -z "$files" ]; then
        continue
    fi
    
    echo "$files" | while read -r file; do
        if [ -z "$file" ]; then
            continue
        fi
        
        # Debug-Ausgabe entfernt
        
        # Füge Dateiinhalt zur Ausgabedatei hinzu
        echo "// ## FILE: $file" >> "$output_file"
        echo "// ## BEGIN ##" >> "$output_file"
        cat "$file" >> "$output_file"
        echo -e "\n// ## END ##\n" >> "$output_file"
    done
done

echo "✅ Dateien wurden erfolgreich in '$output_file' zusammengeführt."